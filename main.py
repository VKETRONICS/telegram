from fastapi import FastAPI, Request
import httpx
import os
from dotenv import load_dotenv
import openai

load_dotenv()

app = FastAPI()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

user_states = {}
dialog_history = {}
last_bot_messages = {}  # chat_id: message_id

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()

    if "message" in data:
        message = data["message"]
        chat_id = message.get("chat", {}).get("id")
        text = message.get("text", "")
        print(f"–ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: {text}")

        if chat_id and text:
            if text in ["/start", "/menu", "üìã –ú–µ–Ω—é"]:
                user_states[chat_id] = "menu"
                dialog_history.pop(chat_id, None)
                await edit_last_message_to_main_menu(chat_id)

            elif text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥":
                await send_catalog_menu(chat_id)

            elif text == "‚ÑπÔ∏è –û –Ω–∞—Å":
                about_text = (
                    "üîß ETRONICS - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!\n\n"
                    "üíª –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –ª—é–±–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞–∫–∞–∑:\n" 
                    "‚Ä¢ üéÆ –ò–≥—Ä–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏\n"
                    "‚Ä¢ üè¢ –ü–ö –¥–ª—è —É—á–µ–±—ã, –æ—Ñ–∏—Å–∞ –∏ —Ä–∞–±–æ—Ç—ã\n" 
                    "‚Ä¢ üíº –°—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞\n\n" 
                    "üñ• –í—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏:\n" 
                    "‚Ä¢ üíª –ù–æ—É—Ç–±—É–∫–∏ - –æ—Ç –±—é–¥–∂–µ—Ç–Ω—ã—Ö –¥–æ –ø—Ä–µ–º–∏—É–º\n"
                    "‚Ä¢ üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã - –º—ã—à–∏, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –Ω–∞—É—à–Ω–∏–∫–∏, SSD –∏ –¥—Ä—É–≥–æ–µ\n\n"
                    "üì¶ –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:\n"
                    "‚Ä¢ üßë‚Äçüíª –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
                    "‚Ä¢ ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö\n"
                    "‚Ä¢ üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n" 
                    "‚Ä¢ üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n" 
                    "üì≤ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:"
                )
                reply_markup = {
                    "keyboard": [
                        [{"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"}],
                        [{"text": "üìã –ú–µ–Ω—é"}]
                    ],
                    "resize_keyboard": True
                }
                await send_message(chat_id, about_text, reply_markup)

            elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                await send_message(chat_id, "üìß support@etronics.pro\nüì± @etronics_support")

            elif text == "‚ùì –ü–æ–º–æ—â—å":
                user_states[chat_id] = "gpt"
                dialog_history[chat_id] = []
                await send_message(chat_id, "üß† –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ üìã –ú–µ–Ω—é", {
                    "keyboard": [[{"text": "üìã –ú–µ–Ω—é"}]],
                    "resize_keyboard": True
                })

            elif user_states.get(chat_id) == "gpt":
                dialog_history.setdefault(chat_id, [])
                dialog_history[chat_id].append({"role": "user", "content": text})
                gpt_response = await ask_gpt(dialog_history[chat_id])
                dialog_history[chat_id].append({"role": "assistant", "content": gpt_response})
                await send_message(chat_id, gpt_response, {
                    "keyboard": [[{"text": "üìã –ú–µ–Ω—é"}]],
                    "resize_keyboard": True
                })

    elif "callback_query" in data:
        callback = data["callback_query"]
        chat_id = callback["message"]["chat"]["id"]
        message_id = callback["message"]["message_id"]
        data_value = callback.get("data", "")
        print(f"CALLBACK: {data_value}")

        if data_value == "laptops":
            sub_markup = {
                "inline_keyboard": [
                    [{"text": "üéÆ –ò–≥—Ä–æ–≤—ã–µ –Ω–æ—É—Ç–±—É–∫–∏", "callback_data": "laptop_gaming"}],
                    [{"text": "üë®‚Äçüéì –î–ª—è —Ä–∞–±–æ—Ç—ã –∏ —É—á—ë–±—ã", "callback_data": "laptop_workstudy"}],
                    [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "catalog"}]
                ]
            }
            await send_catalog_update(chat_id, message_id, "üíª –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", sub_markup)

        elif data_value == "laptop_workstudy":
            sub_markup = {
                "inline_keyboard": [
                    [{"text": "üíª 12‚Äì14", "callback_data": "work_12_14"}],
                    [{"text": "üíª 15‚Äì16", "callback_data": "work_15_16"}],
                    [{"text": "üíª 17‚Äì18", "callback_data": "work_17_18"}],
                    [{"text": "üìã –í–µ—Å—å —Å–ø–∏—Å–æ–∫ (–≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã)", "callback_data": "work_full_list"}],
                    [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "laptops"}]
                ]
            }
            await send_catalog_update(chat_id, message_id, "üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –Ω–æ—É—Ç–±—É–∫–∞:", sub_markup)

        elif data_value == "phones":
            sub_markup = {
                "inline_keyboard": [
                    [{"text": "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "callback_data": "phones_smart"}],
                    [{"text": "üìû –ö–Ω–æ–ø–æ—á–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã", "callback_data": "phones_button"}],
                    [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "catalog"}]
                ]
            }
            await send_catalog_update(chat_id, message_id, "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", sub_markup)

        elif data_value == "catalog":
            reply_markup = {
                "inline_keyboard": [
                    [{"text": "üíª –ù–æ—É—Ç–±—É–∫–∏", "callback_data": "laptops"}],
                    [{"text": "üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã", "callback_data": "phones"}],
                    [{"text": "üñ• –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ", "callback_data": "components"}]
                ]
            }
            await send_catalog_update(chat_id, message_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup)

    return {"ok": True}


async def send_main_menu(chat_id: int):
    reply_markup = {
        "keyboard": [
            [{"text": "üì¶ –ö–∞—Ç–∞–ª–æ–≥"}],
            [{"text": "‚ÑπÔ∏è –û –Ω–∞—Å"}, {"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"}],
            [{"text": "‚ùì –ü–æ–º–æ—â—å"}]
        ],
        "resize_keyboard": True
    }
    await send_message(chat_id, "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ETRONICS STORE!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá", reply_markup)


async def send_catalog_menu(chat_id: int):
    catalog_text = (
        "üì¶ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üíª <b>–ù–æ—É—Ç–±—É–∫–∏</b> ‚Äî –¥–ª—è –∏–≥—Ä, —É—á—ë–±—ã –∏ —Ä–∞–±–æ—Ç—ã\n"
        "üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω—ã</b> ‚Äî –æ—Ç –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –¥–æ —Ñ–ª–∞–≥–º–∞–Ω–æ–≤\n"
        "üñ• <b>–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ</b> ‚Äî –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤–∞—à–µ–≥–æ –ü–ö\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ:"
    )
    reply_markup = {
        "inline_keyboard": [
            [{"text": "üíª –ù–æ—É—Ç–±—É–∫–∏", "callback_data": "laptops"}],
            [{"text": "üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã", "callback_data": "phones"}],
            [{"text": "üñ• –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ", "callback_data": "components"}]
        ]
    }
    await send_message(chat_id, catalog_text, reply_markup)
