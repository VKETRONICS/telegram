from fastapi import FastAPI, Request
import httpx
import os
from dotenv import load_dotenv
import openai
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()

app = FastAPI()
scheduler = AsyncIOScheduler()
scheduler.start()

scheduler = AsyncIOScheduler()
scheduler.start()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
user_states = {}
dialog_history = {}

@app.on_event("startup")
async def schedule_daily_greeting():
    from pytz import timezone
    msk = timezone("Europe/Moscow")
    scheduler.add_job(send_daily_greeting, "cron", hour=10, minute=0, timezone=msk)

async def send_daily_greeting():
    chat_id = os.getenv("GROUP_CHAT_ID")
    if chat_id:
        reply_markup = {
            "inline_keyboard": [
                [{"text": "üîß –ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º", "callback_data": "ask"}]
            ]
        }
        text = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –¥—Ä—É–∑—å—è! ‚òÄÔ∏è\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–¥–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–∏–∫–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º üíª"
        await send_message(int(chat_id), text, reply_markup)

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()

    if "message" in data:
        message = data["message"]
        chat_id = message.get("chat", {}).get("id")
        text = message.get("text", "")
        print(f"–ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: {text}")

        if chat_id and text:
            if text == "/start":
                user_states[chat_id] = "menu"
                dialog_history.pop(chat_id, None)
                await delete_previous_messages(chat_id)
                await send_main_menu(chat_id)
            elif text in ["/menu", "üìã –ú–µ–Ω—é"]:
                user_states[chat_id] = "menu"
                dialog_history.pop(chat_id, None)
                await delete_previous_messages(chat_id)
                await send_main_menu(chat_id)
            elif text == "/bot":
                reply_markup = {
                    "inline_keyboard": [
                        [{"text": "üîß –ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º", "callback_data": "ask"}]
                    ]
                }
                await send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:", reply_markup)
            elif text in ["‚ÑπÔ∏è –û –Ω–∞—Å", "–û –Ω–∞—Å"]:
                about_text = (
                    "üîß ETRONICS ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!\n\n"
                    "üíª –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –Ω–∞ –∑–∞–∫–∞–∑:\n"
                    "‚Ä¢ üéÆ –ò–≥—Ä–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏\n"
                    "‚Ä¢ üè¢ –û—Ñ–∏—Å–Ω—ã–µ –ü–ö\n"
                    "‚Ä¢ üíº –°—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞\n\n"
                    "üñ• –¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
                    "‚Ä¢ üíª –ù–æ—É—Ç–±—É–∫–∏ ‚Äî –æ—Ç –±—é–¥–∂–µ—Ç–Ω—ã—Ö –¥–æ –ø—Ä–µ–º–∏—É–º\n"
                    "‚Ä¢ üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã ‚Äî –º—ã—à–∏, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –Ω–∞—É—à–Ω–∏–∫–∏, SSD –∏ –¥—Ä—É–≥–æ–µ\n\n"
                    "üì¶ –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:\n"
                    "‚Ä¢ üßë‚Äçüíª –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
                    "‚Ä¢ ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö\n"
                    "‚Ä¢ üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n"
                    "‚Ä¢ üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
                    "üì≤ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: support@etronics.pro"
                )
                await send_message(chat_id, about_text)
            elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                await send_message(chat_id, "üìß support@etronics.pro\nüì± @etronics_support")
            elif text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥":
                await send_catalog_menu(chat_id)
            elif text == "‚ùì –ü–æ–º–æ—â—å":
                user_states[chat_id] = "gpt"
                dialog_history[chat_id] = []
                await send_message(chat_id, "üß† –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ üìã –ú–µ–Ω—é", {
                    "keyboard": [[{"text": "üìã –ú–µ–Ω—é"}]],
                    "resize_keyboard": True
                })
            elif user_states.get(chat_id) == "gpt":
                dialog_history.setdefault(chat_id, [])
                dialog_history[chat_id].append({"role": "user", "content": text})
                gpt_response = await ask_gpt(dialog_history[chat_id])
                dialog_history[chat_id].append({"role": "assistant", "content": gpt_response})
                if len(dialog_history[chat_id]) > 20:
                    dialog_history[chat_id] = dialog_history[chat_id][-20:]
                await send_message(chat_id, gpt_response, {
                    "keyboard": [[{"text": "üìã –ú–µ–Ω—é"}]],
                    "resize_keyboard": True
                })
            elif user_states.get(chat_id) != "gpt" and any(word in text.lower() for word in ["–ø–æ–º–æ—â—å", "–ø–æ–¥–±–µ—Ä–∏", "–Ω–æ—É—Ç–±—É–∫", "–ø–∫", "–∏–≥—Ä–æ–≤–æ–π"]):
                dialog_history.setdefault(chat_id, [])
                dialog_history[chat_id].append({"role": "user", "content": text})
                gpt_response = await ask_gpt(dialog_history[chat_id])
                dialog_history[chat_id].append({"role": "assistant", "content": gpt_response})
                if len(dialog_history[chat_id]) > 20:
                    dialog_history[chat_id] = dialog_history[chat_id][-20:]
                await send_message(chat_id, gpt_response)
            else:
                await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start")

    elif "callback_query" in data:
        callback = data["callback_query"]
        chat_id = callback["message"]["chat"]["id"]
        data_value = callback.get("data", "")
        print(f"CALLBACK: {data_value}")
        if data_value == "ask":
            await send_message(chat_id, "üß† –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")

    return {"ok": True}


sent_messages = {}

async def delete_previous_messages(chat_id: int):
    if chat_id in sent_messages:
        for msg_id in sent_messages[chat_id]:
            try:
                async with httpx.AsyncClient() as client:
                    await client.post(f"{TELEGRAM_API_URL}/deleteMessage", json={
                        "chat_id": chat_id,
                        "message_id": msg_id
                    })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        sent_messages[chat_id] = []

async def ask_gpt(messages: list) -> str:
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=300,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"GPT ERROR: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò üòî"

async def send_message(chat_id: int, text: str, reply_markup=None):
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    if reply_markup is not None:
        payload["reply_markup"] = reply_markup

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{TELEGRAM_API_URL}/sendMessage", json=payload)
            print(f"–û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø: {response.status_code} | {response.text}")
        try:
            msg_data = response.json()
            if msg_data.get("ok") and "result" in msg_data:
                sent_messages.setdefault(chat_id, []).append(msg_data["result"]["message_id"])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ message_id:", e)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –°–û–û–ë–©–ï–ù–ò–Ø: {e}")

async def send_main_menu(chat_id: int):
    reply_markup = {
        "keyboard": [
            [{"text": "üì¶ –ö–∞—Ç–∞–ª–æ–≥"}],
            [{"text": "‚ÑπÔ∏è –û –Ω–∞—Å"}, {"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"}],
            [{"text": "‚ùì –ü–æ–º–æ—â—å"}]
        ],
        "resize_keyboard": True
    }
    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ETRONICS STORE! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    await send_message(chat_id, welcome_text, reply_markup)

async def send_catalog_menu(chat_id: int):
    reply_markup = {
        "inline_keyboard": [
            [{"text": "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "callback_data": "phones"}],
            [{"text": "üíª –ù–æ—É—Ç–±—É–∫–∏", "callback_data": "laptops"}],
            [{"text": "üñ• –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ", "callback_data": "components"}]
        ]
    }
    await send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup)

@app.on_event("startup")
async def schedule_daily_greeting():
    from pytz import timezone
    msk = timezone("Europe/Moscow")
    scheduler.add_job(send_daily_greeting, "cron", hour=10, minute=0, timezone=msk)

async def send_daily_greeting():
    chat_id = os.getenv("GROUP_CHAT_ID")
    if chat_id:
        reply_markup = {
            "inline_keyboard": [
                [{"text": "üîß –ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º", "callback_data": "ask"}]
            ]
        }
        text = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –¥—Ä—É–∑—å—è! ‚òÄÔ∏è\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–¥–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–∏–∫–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º üíª"
        await send_message(int(chat_id), text, reply_markup)
