from fastapi import FastAPI, Request
import httpx
import os
from dotenv import load_dotenv
import openai
from datetime import datetime
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()

app = FastAPI()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890

user_states = {}
dialog_history = {}

@app.on_event("startup")
async def startup_event():
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_daily_greeting, "cron", hour=10, minute=0)
    scheduler.start()

async def send_daily_greeting():
    import random
    if GROUP_CHAT_ID:
        greetings = [
            "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –¥—Ä—É–∑—å—è! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ –∏–∑ —Ç–µ—Ö–Ω–∏–∫–∏ üíª",
            "üëã –ü—Ä–∏–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–¥–±–æ—Ä–æ–º –Ω–æ—É—Ç–±—É–∫–æ–≤, –ü–ö –∏ –≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–æ–π!",
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç ETRONICS: —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å, —Å—Ä–∞–≤–Ω–∏—Ç—å –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å!",
            "üí° –ù–æ–≤–æ–µ —É—Ç—Ä–æ ‚Äî –Ω–æ–≤—ã–µ –∏–¥–µ–∏! –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Ç–µ—Ö–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º üëá",
            "üéØ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ! –ë–æ—Ç —É–∂–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏."
        ]
        text = random.choice(greetings) + "\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá"
        await send_message(int(GROUP_CHAT_ID), text, {
            "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
            "resize_keyboard": True
        })
          await send_message(int(GROUP_CHAT_ID), text, {
            "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
            "resize_keyboard": True
        })

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()

    if "message" in data:
        message = data["message"]
        chat_id = message.get("chat", {}).get("id")
        message_id = message.get("message_id")
        text = message.get("text", "")

        if "new_chat_members" in message:
            now_hour = datetime.now(pytz.timezone("Europe/Moscow")).hour
            if 5 <= now_hour < 12:
                greeting = "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
            elif 12 <= now_hour < 17:
                greeting = "üå§ –î–æ–±—Ä—ã–π –¥–µ–Ω—å"
            elif 17 <= now_hour < 23:
                greeting = "üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            else:
                greeting = "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏"

            for user in message["new_chat_members"]:
                name = user.get("first_name", "–¥—Ä—É–≥")
                welcome = (
                    f"{greeting}, {name}!\n\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É ETRONICS üí°\n"
                    "–Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–∏–∫–∏, –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å ü§ñ\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá"
                )
                await send_message(chat_id, welcome, {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })

        if chat_id and text:
            if text in ["/start", "/menu", "üìã –ú–ï–ù–Æ"]:
                user_states[chat_id] = "menu"
                dialog_history.pop(chat_id, None)
                await clear_chat(chat_id, message_id)
                await send_main_menu(chat_id)
            elif text == "üì¶ –ö–ê–¢–ê–õ–û–ì":
                await send_catalog_menu(chat_id)
            elif text == "‚ÑπÔ∏è –û –ù–ê–°":
                await send_message(chat_id, "üî• ETRONICS ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏! ...", {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })
            elif text == "üìû –ö–û–ù–¢–ê–ö–¢–´":
                await send_message(chat_id, "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nhttps://vk.com/etronics_pro", {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })
            elif text == "‚ùì –ü–û–ú–û–©–¨":
                user_states[chat_id] = "gpt"
                dialog_history[chat_id] = []
                await send_message(chat_id, "üß† –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ üìã –ú–ï–ù–Æ", {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })
            elif user_states.get(chat_id) == "gpt":
                dialog_history.setdefault(chat_id, []).append({"role": "user", "content": text})
                gpt_response = await ask_gpt(dialog_history[chat_id])
                dialog_history[chat_id].append({"role": "assistant", "content": gpt_response})
                await send_message(chat_id, gpt_response, {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })

    elif "callback_query" in data:
        callback = data["callback_query"]
        chat_id = callback["message"]["chat"]["id"]
        message_id = callback["message"]["message_id"]
        data_value = callback.get("data", "")

        if data_value == "main_menu":
            await clear_chat(chat_id, message_id + 1)
            await send_main_menu(chat_id)
        else:
            await handle_catalog_callbacks(chat_id, message_id, data_value)

    return {"ok": True}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

async def send_message(chat_id: int, text: str, reply_markup=None):
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    async with httpx.AsyncClient() as client:
        await client.post(f"{TELEGRAM_API_URL}/sendMessage", json=payload)

async def clear_chat(chat_id: int, until_message_id: int):
    async with httpx.AsyncClient() as client:
        for msg_id in range(until_message_id - 1, until_message_id - 15, -1):
            await client.post(f"{TELEGRAM_API_URL}/deleteMessage", json={
                "chat_id": chat_id,
                "message_id": msg_id
            })

async def send_main_menu(chat_id: int):
    markup = {
        "keyboard": [
            [{"text": "üì¶ –ö–ê–¢–ê–õ–û–ì"}],
            [{"text": "‚ÑπÔ∏è –û –ù–ê–°"}, {"text": "üìû –ö–û–ù–¢–ê–ö–¢–´"}],
            [{"text": "‚ùì –ü–û–ú–û–©–¨"}, {"text": "üßπ –û–ß–ò–°–¢–ò–¢–¨ –ß–ê–¢"}]
        ],
        "resize_keyboard": True
    }
    await send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ETRONICS STORE!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", markup)

async def send_catalog_menu(chat_id: int):
    markup = {
        "inline_keyboard": [
            [{"text": "üíª –ù–û–£–¢–ë–£–ö–ò", "callback_data": "laptops"}],
            [{"text": "üñ• –ì–û–¢–û–í–´–ï –ü–ö", "callback_data": "ready_pcs"}],
            [{"text": "üì± –°–ú–ê–†–¢–§–û–ù–´", "callback_data": "phones_smart"}],
            [{"text": "üì± –ü–õ–ê–ù–®–ï–¢–´", "callback_data": "tablets"}],
            [{"text": "üìö –≠–õ–ï–ö–¢–†–û–ù–ù–´–ï –ö–ù–ò–ì–ò", "callback_data": "ebooks"}]
        ]
    }
    await send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", markup)

async def send_catalog_update(chat_id: int, message_id: int, text: str, reply_markup: dict):
    async with httpx.AsyncClient() as client:
        await client.post(f"{TELEGRAM_API_URL}/editMessageText", json={
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "reply_markup": reply_markup
        })

async def handle_catalog_callbacks(chat_id: int, message_id: int, data_value: str):
    subcategories = {
        "laptops": [
            ("üéÆ –ò–ì–†–û–í–´–ï –ù–û–£–¢–ë–£–ö–ò", "laptop_gaming"),
            ("üë®‚Äçüéì –î–õ–Ø –†–ê–ë–û–¢–´ –ò –£–ß–Å–ë–´", "laptop_workstudy"),
            ("‚¨ÖÔ∏è –ù–ê–ó–ê–î", "catalog")
        ],
        "catalog": [
            ("üíª –ù–û–£–¢–ë–£–ö–ò", "laptops"),
            ("üñ• –ì–û–¢–û–í–´–ï –ü–ö", "ready_pcs"),
            ("üì± –°–ú–ê–†–¢–§–û–ù–´", "phones_smart"),
            ("üì± –ü–õ–ê–ù–®–ï–¢–´", "tablets"),
            ("üìö –≠–õ–ï–ö–¢–†–û–ù–ù–´–ï –ö–ù–ò–ì–ò", "ebooks")
        ]
    }

    if data_value in subcategories:
        markup = {
            "inline_keyboard": [[{"text": name, "callback_data": cb}] for name, cb in subcategories[data_value]]
        }
        await send_catalog_update(chat_id, message_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", markup)

async def ask_gpt(messages: list) -> str:
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=300,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"GPT ERROR: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò üòî"
