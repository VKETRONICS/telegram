from fastapi import FastAPI, Request
import httpx
import os
from dotenv import load_dotenv
import openai
from datetime import datetime
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()

app = FastAPI()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

user_states = {}
dialog_history = {}

# ID –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890

@app.on_event("startup")
async def startup_event():
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_daily_greeting, "cron", hour=10, minute=0)
    scheduler.start()

async def send_daily_greeting():
    import random
    if GROUP_CHAT_ID:
        greetings = [
            "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –¥—Ä—É–∑—å—è! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ –∏–∑ —Ç–µ—Ö–Ω–∏–∫–∏ üíª",
            "üëã –ü—Ä–∏–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–¥–±–æ—Ä–æ–º –Ω–æ—É—Ç–±—É–∫–æ–≤, –ü–ö –∏ –≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–æ–π!",
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç ETRONICS: —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å, —Å—Ä–∞–≤–Ω–∏—Ç—å –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å!",
            "üí° –ù–æ–≤–æ–µ —É—Ç—Ä–æ ‚Äî –Ω–æ–≤—ã–µ –∏–¥–µ–∏! –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Ç–µ—Ö–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º üëá",
            "üéØ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ! –ë–æ—Ç —É–∂–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏."
        ]
        text = random.choice(greetings) + "

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá"
        await send_message(int(GROUP_CHAT_ID), text, {
            "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
            "resize_keyboard": True
        })

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()

    if "message" in data:
        message = data["message"]
        chat_id = message.get("chat", {}).get("id")
        message_id = message.get("message_id")
        text = message.get("text", "")
        print(f"–ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: {text}")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if "new_chat_members" in message:
            moscow_tz = pytz.timezone("Europe/Moscow")
            now_hour = datetime.now(moscow_tz).hour

            if 5 <= now_hour < 12:
                greeting = "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
            elif 12 <= now_hour < 17:
                greeting = "üå§ –î–æ–±—Ä—ã–π –¥–µ–Ω—å"
            elif 17 <= now_hour < 23:
                greeting = "üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            else:
                greeting = "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏"

            for user in message["new_chat_members"]:
                first_name = user.get("first_name", "–¥—Ä—É–≥")

                welcome_text = (
                    f"{greeting}, {first_name}!\n\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É ETRONICS üí°\n"
                    "–Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–∏–∫–∏, –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å ü§ñ\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá"
                )

                await send_message(chat_id, welcome_text, {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })

        if chat_id and text:
            if text in ["/start", "/menu", "üìã –ú–ï–ù–Æ"]:
                user_states[chat_id] = "menu"
                dialog_history.pop(chat_id, None)
                await clear_chat(chat_id, message_id)
                await send_main_menu(chat_id)
            elif text == "üì¶ –ö–ê–¢–ê–õ–û–ì":
                await send_catalog_menu(chat_id)
            elif text == "‚ÑπÔ∏è –û –ù–ê–°":
                about_text = (
                    "üî• ETRONICS - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!\n\n"
                    "üíª –°–ë–û–†–ö–ê –ö–û–ú–ü–¨–Æ–¢–ï–†–û–í –ù–ê –ó–ê–ö–ê–ó:\n"
                    "‚Ä¢ üéÆ –ò–≥—Ä–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
                    "‚Ä¢ üè¢ –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –¥–ª—è —É—á–µ–±—ã, –æ—Ñ–∏—Å–∞ –∏ —Ä–∞–±–æ—Ç—ã\n"
                    "‚Ä¢ üíº –†–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤\n\n"
                    "‚ö°Ô∏è –í–°–ï–ì–î–ê –í –ù–ê–õ–ò–ß–ò–ò –ë–û–õ–¨–®–û–ô –ê–°–°–û–†–¢–ò–ú–ï–ù–¢:\n"
                    "‚Ä¢ üíª –ù–æ—É—Ç–±—É–∫–∏ - –æ—Ç –±—é–¥–∂–µ—Ç–Ω—ã—Ö –¥–æ –ø—Ä–µ–º–∏—É–º\n"
                    "‚Ä¢ üì∫ –¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä—ã\n"
                    "‚Ä¢ üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã - –º—ã—à–∏, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –Ω–∞—É—à–Ω–∏–∫–∏, SSD –∏ –¥—Ä—É–≥–æ–µ\n\n"
                    "üì¶ –ü–û–ß–ï–ú–£ –í–´–ë–ò–†–ê–Æ–¢ –ù–ê–°:\n"
                    "‚Ä¢ üíª –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
                    "‚Ä¢ üßë‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n"
                    "‚Ä¢ ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö\n"
                    "‚Ä¢ üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
                    "‚Ä¢ üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
                    "‚Ä¢ üí¨ –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω–∞—è –∏ –ø–æ—Å—Ç–≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
                )
                await send_message(chat_id, about_text, {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })
            elif text == "üìû –ö–û–ù–¢–ê–ö–¢–´":
                contact_text = (
                    "üîó VK: https://vk.com/etronics_pro\n"
                    "üìß Email: support@etronics.pro\n"
                    "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 962 915 5444\n"
                    "üåê –°–∞–π—Ç: https://www.etronics.pro"
                )
                await send_message(chat_id, contact_text, {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })
            elif text == "‚ùì –ü–û–ú–û–©–¨":
                user_states[chat_id] = "gpt"
                dialog_history[chat_id] = []
                await send_message(chat_id, "üß† –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ üìã –ú–ï–ù–Æ", {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })
            elif text == "üßπ –û–ß–ò–°–¢–ò–¢–¨ –ß–ê–¢":
                await clear_chat(chat_id, message_id)
                await send_main_menu(chat_id)
            elif user_states.get(chat_id) == "gpt":
                dialog_history.setdefault(chat_id, [])
                dialog_history[chat_id].append({"role": "user", "content": text})
                gpt_response = await ask_gpt(dialog_history[chat_id])
                dialog_history[chat_id].append({"role": "assistant", "content": gpt_response})
                await send_message(chat_id, gpt_response, {
                    "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                    "resize_keyboard": True
                })

    elif "callback_query" in data:
        callback = data["callback_query"]
        chat_id = callback["message"]["chat"]["id"]
        message_id = callback["message"]["message_id"]
        data_value = callback.get("data", "")
        print(f"CALLBACK: {data_value}")

        if data_value == "contacts":
            contact_text = (
                "üîó VK: https://vk.com/etronics_pro\n"
                "üìß Email: support@etronics.pro\n"
                "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 962 915 5444\n"
                "üåê –°–∞–π—Ç: https://www.etronics.pro"
            )
            await send_message(chat_id, contact_text, {
                "keyboard": [[{"text": "üìã –ú–ï–ù–Æ"}]],
                "resize_keyboard": True
            })
        elif data_value == "main_menu":
            await clear_chat(chat_id, message_id + 1)
            await send_main_menu(chat_id)
        elif data_value == "laptop_workstudy":
            sub_markup = {
                "inline_keyboard": [
                    [{"text": "üíª 12‚Äì14", "callback_data": "work_12_14"}],
                    [{"text": "üíª 15‚Äì16", "callback_data": "work_15_16"}],
                    [{"text": "üíª 17‚Äì18", "callback_data": "work_17_18"}],
                    [{"text": "üìã –í–ï–°–¨ –°–ü–ò–°–û–ö (–í–°–ï –†–ê–ó–ú–ï–†–´)", "callback_data": "work_full_list"}],
                    [{"text": "‚¨ÖÔ∏è –ù–ê–ó–ê–î", "callback_data": "laptops"}]
                ]
            }
            await send_catalog_update(chat_id, message_id, "üë®‚Äçüéì –í–´–ë–ï–†–ò–¢–ï –†–ê–ó–ú–ï–† –ù–û–£–¢–ë–£–ö–ê:", sub_markup)
        else:
            await handle_catalog_callbacks(chat_id, message_id, data_value)

    return {"ok": True}

async def handle_catalog_callbacks(chat_id: int, message_id: int, data_value: str):
    subcategories = {
        "laptops": [
            ("üéÆ –ò–ì–†–û–í–´–ï –ù–û–£–¢–ë–£–ö–ò", "laptop_gaming"),
            ("üë®‚Äçüéì –î–õ–Ø –†–ê–ë–û–¢–´ –ò –£–ß–Å–ë–´", "laptop_workstudy"),
            ("‚¨ÖÔ∏è –ù–ê–ó–ê–î", "catalog")
        ],
        "ready_pcs": [
            ("üñ• –ú–û–ù–û–ë–õ–û–ö–ò", "monoblocks"),
            ("üíª –ù–ï–¢–¢–û–ü–´", "nettops"),
            ("üß± –°–ò–°–¢–ï–ú–ù–´–ï –ë–õ–û–ö–ò", "towers"),
            ("üìã –ü–û–ö–ê–ó–ê–¢–¨ –í–°–Å", "ready_all"),
            ("‚¨ÖÔ∏è –ù–ê–ó–ê–î", "catalog")
        ],
        "phones_smart": [
            ("üì± SAMSUNG", "samsung"),
            ("üì± XIAOMI", "xiaomi"),
            ("üìã –ü–û–ö–ê–ó–ê–¢–¨ –í–°–Å", "phones_all"),
            ("‚¨ÖÔ∏è –ù–ê–ó–ê–î", "catalog")
        ],
        "tablets": [
            ("üì± SAMSUNG", "tablet_samsung"),
            ("üì± XIAOMI", "tablet_xiaomi"),
            ("üìã –ü–û–ö–ê–ó–ê–¢–¨ –í–°–Å", "tablet_all"),
            ("‚¨ÖÔ∏è –ù–ê–ó–ê–î", "catalog")
        ],
        "ebooks": [
            ("üìò POCKETBOOK", "ebook_pocketbook"),
            ("üìó ONYX BOOX", "ebook_onyx"),
            ("üìï DIGMA", "ebook_digma"),
            ("üìã –ü–û–ö–ê–ó–ê–¢–¨ –í–°–Å", "ebook_all"),
            ("‚¨ÖÔ∏è –ù–ê–ó–ê–î", "catalog")
        ],
        "catalog": [
            ("üíª –ù–û–£–¢–ë–£–ö–ò", "laptops"),
            ("üñ• –ì–û–¢–û–í–´–ï –ü–ö", "ready_pcs"),
            ("üì± –°–ú–ê–†–¢–§–û–ù–´", "phones_smart"),
            ("üì± –ü–õ–ê–ù–®–ï–¢–´", "tablets"),
            ("üìö –≠–õ–ï–ö–¢–†–û–ù–ù–´–ï –ö–ù–ò–ì–ò", "ebooks")
        ]
    }
    if data_value in subcategories:
        reply_markup = {
            "inline_keyboard": [[{"text": name, "callback_data": callback}] for name, callback in subcategories[data_value]]
        }
        await send_catalog_update(chat_id, message_id, "–í–´–ë–ï–†–ò–¢–ï –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–Æ:", reply_markup)

async def send_catalog_update(chat_id: int, message_id: int, text: str, reply_markup: dict):
    async with httpx.AsyncClient() as client:
        await client.post(
            f"{TELEGRAM_API_URL}/editMessageText",
            json={
                "chat_id": chat_id,
                "message_id": message_id,
                "text": text,
                "reply_markup": reply_markup
            }
        )

async def clear_chat(chat_id: int, until_message_id: int):
    async with httpx.AsyncClient() as client:
        for msg_id in range(until_message_id - 1, until_message_id - 15, -1):
            await client.post(
                f"{TELEGRAM_API_URL}/deleteMessage",
                json={"chat_id": chat_id, "message_id": msg_id}
            )

async def send_main_menu(chat_id: int):
    reply_markup = {
        "keyboard": [
            [{"text": "üì¶ –ö–ê–¢–ê–õ–û–ì"}],
            [{"text": "‚ÑπÔ∏è –û –ù–ê–°"}, {"text": "üìû –ö–û–ù–¢–ê–ö–¢–´"}],
            [{"text": "‚ùì –ü–û–ú–û–©–¨"}, {"text": "üßπ –û–ß–ò–°–¢–ò–¢–¨ –ß–ê–¢"}]
        ],
        "resize_keyboard": True
    }
    await send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ETRONICS STORE

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª ‚¨áÔ∏è", reply_markup)

async def send_catalog_menu(chat_id: int):
    reply_markup = {
        "inline_keyboard": [
            [{"text": "üíª –ù–û–£–¢–ë–£–ö–ò", "callback_data": "laptops"}],
            [{"text": "üñ• –ì–û–¢–û–í–´–ï –ü–ö", "callback_data": "ready_pcs"}],
            [{"text": "üì± –°–ú–ê–†–¢–§–û–ù–´", "callback_data": "phones_smart"}],
            [{"text": "üì± –ü–õ–ê–ù–®–ï–¢–´", "callback_data": "tablets"}],
            [{"text": "üìö –≠–õ–ï–ö–¢–†–û–ù–ù–´–ï –ö–ù–ò–ì–ò", "callback_data": "ebooks"}]
        ]
    }
    await send_message(chat_id, "–í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –¢–û–í–ê–†–ê:", reply_markup)

async def send_message(chat_id: int, text: str, reply_markup=None):
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    if reply_markup is not None:
        payload["reply_markup"] = reply_markup
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{TELEGRAM_API_URL}/sendMessage", json=payload)
            print(f"–û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø: {response.status_code} | {response.text}")
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –°–û–û–ë–©–ï–ù–ò–Ø: {e}")

async def ask_gpt(messages: list) -> str:
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=300,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"GPT ERROR: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò üòî"
