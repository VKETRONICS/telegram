from fastapi import FastAPI, Request
import httpx
import os
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()

    if "message" in data:
        message = data["message"]
        chat_id = message.get("chat", {}).get("id")
        text = message.get("text", "")

        if chat_id and text:
            if text == "/start":
                await send_main_menu(chat_id)
            elif text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥":
                await send_catalog_menu(chat_id)
            elif text in ["‚ÑπÔ∏è –û –Ω–∞—Å", "–û –Ω–∞—Å"]:
                about_text = (
                    "<b>–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ ETRONICS üíª</b>\n\n"
                    "–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –≤ –º–∏—Ä–µ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n"
                    "<b>–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è:</b>\n"
                    "‚Ä¢ üõ† –°–±–æ—Ä–∫–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –ø–æ–¥ –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏\n"
                    "‚Ä¢ üíª –ü—Ä–æ–¥–∞–∂–µ–π –Ω–æ—É—Ç–±—É–∫–æ–≤ –≤–µ–¥—É—â–∏—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
                    "‚Ä¢ üéß –†–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤: –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –º—ã—à–∏, –Ω–∞—É—à–Ω–∏–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n\n"
                    "<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
                    "‚Ä¢ üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É\n"
                    "‚Ä¢ ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n"
                    "‚Ä¢ üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã\n"
                    "‚Ä¢ üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ\n"
                    "‚Ä¢ üßë‚Äçüíª –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
                    "<b>–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:</b>\n\n"
                    "<u>üñ• –°–±–æ—Ä–∫–∞ –ü–ö:</u>\n"
                    "‚Ä¢ üéÆ –ò–≥—Ä–æ–≤—ã–µ –ü–ö\n"
                    "‚Ä¢ üè¢ –û—Ñ–∏—Å–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã\n"
                    "‚Ä¢ üíº –†–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏\n\n"
                    "<u>üíª –ù–æ—É—Ç–±—É–∫–∏:</u>\n"
                    "‚Ä¢ üìö –î–ª—è —Ä–∞–±–æ—Ç—ã –∏ —É—á—ë–±—ã\n"
                    "‚Ä¢ üïπ –ò–≥—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏\n"
                    "‚Ä¢ üåü –ü—Ä–µ–º–∏—É–º-—Ä–µ—à–µ–Ω–∏—è\n\n"
                    "<u>üéß –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã:</u>\n"
                    "‚Ä¢ üñ± –ú—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n"
                    "‚Ä¢ üñ• –ú–æ–Ω–∏—Ç–æ—Ä—ã\n"
                    "‚Ä¢ üéß –ù–∞—É—à–Ω–∏–∫–∏ –∏ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã\n"
                    "‚Ä¢ üíæ –í–Ω–µ—à–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏ –∏ SSD"
                )
                await send_message(chat_id, about_text)
            elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                await send_message(chat_id, "üìß support@etronics.ru\nüì± @etronics_support")
            elif text == "‚ùì –ü–æ–º–æ—â—å":
                await send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
            else:
                await send_message(chat_id, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")

    elif "callback_query" in data:
        callback = data["callback_query"]
        chat_id = callback["message"]["chat"]["id"]
        data_value = callback.get("data", "")

        if data_value == "phones":
            await send_message(chat_id, "üì± –í —Ä–∞–∑–¥–µ–ª–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –∫—Ä—É—Ç—ã–µ –º–æ–¥–µ–ª–∏!")
        elif data_value == "laptops":
            await send_message(chat_id, "üíª –†–∞–∑–¥–µ–ª –Ω–æ—É—Ç–±—É–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif data_value == "components":
            await send_message(chat_id, "üñ• –ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è —Å–±–æ—Ä–∫–∏ –ü–ö.")

    return {"ok": True}

async def send_message(chat_id: int, text: str, reply_markup=None):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": reply_markup,
        "parse_mode": "HTML"
    }
    async with httpx.AsyncClient() as client:
        await client.post(f"{TELEGRAM_API_URL}/sendMessage", json=payload)

async def send_main_menu(chat_id: int):
    reply_markup = {
        "keyboard": [
            [{"text": "üì¶ –ö–∞—Ç–∞–ª–æ–≥"}],
            [{"text": "‚ÑπÔ∏è –û –Ω–∞—Å"}, {"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"}],
            [{"text": "‚ùì –ü–æ–º–æ—â—å"}]
        ],
        "resize_keyboard": True
    }
    welcome_text = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ETRONICS STORE! üõç</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"
    await send_message(chat_id, welcome_text, reply_markup)

async def send_catalog_menu(chat_id: int):
    reply_markup = {
        "inline_keyboard": [
            [{"text": "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "callback_data": "phones"}],
            [{"text": "üíª –ù–æ—É—Ç–±—É–∫–∏", "callback_data": "laptops"}],
            [{"text": "üñ• –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ", "callback_data": "components"}],
        ]
    }
    await send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ üëá", reply_markup)
